name: Security Scan
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 3 * * 2' # Weekly on Tuesday at 3 AM
  workflow_dispatch: # Allow manual trigger

jobs:
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        language: ['java']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build for analysis
        run: ./gradlew assembleDebug --no-daemon

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Generate dependency tree
        run: ./gradlew dependencies > dependencies.txt

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0' # Don't fail the build on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'MuscLab'
          path: '.'
          format: 'SARIF'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP Dependency Check results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'reports/dependency-check-report.sarif'

  secrets-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --fail

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  android-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build APK for security analysis
        run: ./gradlew assembleDebug

      - name: Run Android security linter
        run: ./gradlew lintDebug

      - name: Check for security issues in lint report
        run: |
          if [ -f "app/build/reports/lint-results-debug.xml" ]; then
            # Check for security-related lint issues
            SECURITY_ISSUES=$(grep -c 'category="Security"' app/build/reports/lint-results-debug.xml || echo "0")
            echo "Found $SECURITY_ISSUES security-related lint issues"
          
            if [ "$SECURITY_ISSUES" -gt 0 ]; then
              echo "⚠️ Security issues found in lint report"
              grep 'category="Security"' app/build/reports/lint-results-debug.xml || true
            else
              echo "✅ No security issues found in lint report"
            fi
          fi

      - name: Check permissions in manifest
        run: |
          # Check for potentially dangerous permissions
          DANGEROUS_PERMS=(
            "android.permission.CAMERA"
            "android.permission.RECORD_AUDIO"
            "android.permission.ACCESS_FINE_LOCATION"
            "android.permission.ACCESS_COARSE_LOCATION"
            "android.permission.READ_CONTACTS"
            "android.permission.WRITE_CONTACTS"
            "android.permission.READ_SMS"
            "android.permission.SEND_SMS"
          )
          
          echo "🔍 Checking for sensitive permissions in AndroidManifest.xml..."
          
          for perm in "${DANGEROUS_PERMS[@]}"; do
            if grep -q "$perm" app/src/main/AndroidManifest.xml; then
              echo "⚠️  Found permission: $perm"
            fi
          done

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            app/build/reports/lint-results-debug.xml
            app/build/reports/lint-results-debug.html
          retention-days: 30

  security-summary:
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secrets-scan, android-security]
    if: always()
    permissions:
      security-events: write
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Security Scan Summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [[ "${{ needs.codeql-analysis.result }}" == "success" ]]; then
            echo "✅ CodeQL Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CodeQL Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ Dependency Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency Scan: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
            echo "✅ Secrets Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secrets Scan: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.android-security.result }}" == "success" ]]; then
            echo "✅ Android Security: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Android Security: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 View detailed results in the Security tab of your repository." >> $GITHUB_STEP_SUMMARY