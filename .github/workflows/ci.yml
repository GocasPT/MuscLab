name: CI
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Generate test coverage report
        run: |
          if ./gradlew tasks --all | grep -q "testDebugUnitTestCoverage"; then
            ./gradlew testDebugUnitTestCoverage
          elif ./gradlew tasks --all | grep -q "jacocoTestReport"; then
            ./gradlew jacocoTestReport
          else
            echo "No coverage task available, skipping coverage generation"
          fi

      - name: Quality Gate - Coverage Check
        if: hashFiles('**/build/reports/jacoco/**/*.xml') != '' || hashFiles('**/build/reports/coverage/**/*.xml') != ''
        run: |
          # Extract coverage percentage from XML report
          COVERAGE_FILE=$(find . -name "*.xml" -path "*/jacoco*" -o -path "*/coverage*" | head -1)
          if [ -n "$COVERAGE_FILE" ]; then
            COVERAGE=$(grep -o 'line-rate="[0-9.]*"' "$COVERAGE_FILE" | head -1 | grep -o '[0-9.]*' | awk '{print int($1*100)}')
            echo "Code coverage: ${COVERAGE}%"
            if [ "$COVERAGE" -lt 70 ]; then
              echo "❌ Coverage ${COVERAGE}% is below minimum 70%"
              exit 1
            else
              echo "✅ Coverage ${COVERAGE}% meets requirements"
            fi
          fi

      - name: Upload coverage to Codecov
        if: success() && (hashFiles('**/build/reports/coverage/**/*.xml') != '' || hashFiles('**/build/reports/jacoco/**/*.xml') != '')
        uses: codecov/codecov-action@v4
        with:
          files: |
            ./app/build/reports/coverage/test/debug/report.xml
            ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.run_number }}
          path: app/build/outputs/apk/debug/*.apk
          retention-days: 30

  lint:
    runs-on: ubuntu-latest
    needs: [] # Run in parallel with test job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Android Lint
        run: ./gradlew lintDebug

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.run_number }}
          path: |
            app/build/reports/lint-results-debug.html
            app/build/reports/lint-results-debug.xml
            app/build/reports/detekt/detekt.html
            app/build/reports/detekt/detekt.xml
          retention-days: 14

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified